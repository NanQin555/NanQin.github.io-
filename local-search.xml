<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C语言学习笔记（更新中）</title>
    <link href="/2022/09/03/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/09/03/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><table><thead><tr><th>数据类型</th><th>中文名</th><th>大小</th></tr></thead><tbody><tr><td>char</td><td>字符数据类型</td><td>1</td></tr><tr><td>short</td><td>短整型</td><td>2</td></tr><tr><td>int</td><td>整形</td><td>4</td></tr><tr><td>long</td><td>长整型</td><td>4</td></tr><tr><td>longlong</td><td>更长的整形</td><td>8</td></tr><tr><td>float</td><td>单精度浮点数</td><td>4</td></tr><tr><td>double</td><td>双精度浮点数</td><td>8</td></tr></tbody></table><p>多种种类是为了丰富表达各种生活中的值</p><p>计算类型的大小：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,siezof(...));<br></code></pre></td></tr></table></figure><p>类型的使用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> ch = <span class="hljs-string">&#x27;w&#x27;</span>;<br><span class="hljs-type">int</span> weight = <span class="hljs-number">120</span>;<br><span class="hljs-type">int</span> salary = <span class="hljs-number">20000</span>;<br></code></pre></td></tr></table></figure><hr><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>作用域：变量起作用的范围</p><p>生命周期：变量从创建到销毁</p><p>分类：局部变量，全局变量</p><p>局部变量：定义在主函数内的某个”{}”内</p><p>全局变量：定义在主函数外</p><p><strong>当变量重名时，局部变量优先与全局变量</strong></p><hr><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p>分类：</p><p>字面常量                                  3.14；      1000；</p><p>const修饰的常变量                const float  pai = 3.14f    (再写pai = 5.14 是无法修改的)</p><p>#define定义的标识符常量    #define Max 100         printf(“max = %d\n”,Max);</p><p>枚举常量                                 enum Sex</p><p>​                                                 {MALE,FEMALE,SECRET};</p><p>​                                                  printf(“%d\n”,MALE);</p><hr><h1 id="字符串-转义字符-操作符"><a href="#字符串-转义字符-操作符" class="headerlink" title="字符串+转义字符+操作符"></a>字符串+转义字符+操作符</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>由”  “引起来的一串字符称为字符串(字面值)</p><p>字符串的结束标志是\0,计算字符串长度时\0是结束标志，但\0不算在字符内容里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> arr1[] = <span class="hljs-string">&quot;bit&quot;</span>;<br><span class="hljs-type">char</span> arr2[] = &#123;<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br></code></pre></td></tr></table></figure><p>“ “内自动加\0,’  ‘内需手动加</p><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><table><thead><tr><th align="center">类型</th><th align="left">含义</th></tr></thead><tbody><tr><td align="center">\‘ \“</td><td align="left">表示字符串内部的’ ‘  “  “</td></tr><tr><td align="center">\\</td><td align="left">防止被转译</td></tr><tr><td align="center">\a</td><td align="left">警告，蜂鸣声</td></tr><tr><td align="center">\n</td><td align="left">换行</td></tr><tr><td align="center">\r</td><td align="left">回车</td></tr><tr><td align="center">\ddd</td><td align="left">表示1~3个八进制数</td></tr><tr><td align="center">\xdd</td><td align="left">表示2个十六进制数</td></tr></tbody></table><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>分类：</p><p>算术操作符： + - * / %</p><p>​                        /:两边为整数进行整数除法，取商；有一边为小数进行小数除法</p><p>​                       %： 取余，整数除法中取余数</p><p>位移操作符： &lt;&lt;  &gt;&gt;</p><p>位操作符： &amp;按位与    ^按位异或     |按位或</p><p>赋值操作符： =   +=   -=  *=   /=   &amp;=   ^=   |=  &gt;&gt;=   &lt;&lt;=</p><p>​                    复合赋值：a = a +3    与     a += 3   一样</p><p>单目操作符(只有一个操作数)： !逻辑取反  (0表示假，非0表示真，默认1为真)</p><p>​                                       a=10;   !a=0;    </p><p>​                                       a=1;     !a=0;</p><p>双目操作符(有两个操作符)： +  -   *   /   %</p><p>注：<strong>sizeof</strong>是一个操作符        格式：sizeof(  )  ，( ) 可以省略但通常不省</p><p>​       <strong>~按位取反</strong>(二进制位)：把所有的二进制数字，1变为0，0变为1</p><p>​      整形a=0;   ~a=-1</p><p>过程：0:00000000000000000000000000000000(补码)  -&gt;  11111111111111111111111111111111(补码)</p><p>-&gt;11111111111111111111111111111110(反码) -&gt;  10000000000000000000000000000001(原码)</p><p>整数在内存中储存是补码  (原-&gt;反-&gt;补)</p><p>负整数有 原码(第一号位是符号位，1为负，0为正)，反码(符号位不变其他位按位取反)，补码(反码加1)</p><p>规定正整数的原码，反码，补码相同</p><p>++ 前置：先++，后使用  int a = 10; int b = ++a;  a = 11  b = 11;</p><p>++ 后置：先使用，后++  int a = 10; int b = a++;  a = 11  b = 10;</p><p>强制类型转化：在其后面加（）</p><p>关系操作符：==  &gt;=  &lt;=  != &gt;  &lt;</p><p>逻辑操作符：  &amp;&amp;逻辑与(并且：一假即假)  ||逻辑或（或者：一真即真）</p><p>条件操作符（三目操作符）：exp1 ? exp2 : exp3</p><p>​                                                  即exp1成立，exp2计算，整个表达式为exp2的结果</p><p>​                                                      exp1不成立，exp3计算，整个表达式为exp3的结果</p><p>逗号表达式： 逗号隔开的一串表达式</p><p>​                        exp1,exp2,exp3,… …,exp n </p><p>​                        从左到右依次计算，整个表达式的结果就是最后一个表达式的结果</p><p>下标引用：  [  ]  调用函数时，函数名后面的（）就是函数调用操作符</p><hr><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><p>由C语言提供，不能自己创建关键字；不能以关键字作为变量名</p><table><thead><tr><th>种类</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>auto</td><td>break</td><td>long</td><td>typedef</td></tr><tr><td>case</td><td>char</td><td>register</td><td>union</td></tr><tr><td>const</td><td>continue</td><td>return</td><td>void</td></tr><tr><td>default</td><td>do</td><td>short</td><td>volatile</td></tr><tr><td>double</td><td>else</td><td>signed</td><td>while</td></tr><tr><td>enum</td><td>extern</td><td>unsignde</td><td></td></tr><tr><td>float</td><td>for</td><td>sizeof</td><td></td></tr><tr><td>goto</td><td>if</td><td>static</td><td></td></tr><tr><td>int</td><td>struct</td><td>switch</td><td></td></tr></tbody></table><p><strong>注：inculde define 不是关键字，而是预处理指令</strong></p><p>typedf 类型重定义 ： 如  typedf unsigned int u_int</p><p>​                                     简写复杂关键字</p><p>static 静态的 ：修饰局部变量          在whlie循环中正常是自动销毁，修饰后不自动销毁，本质是改变变量的储存类型，使得生命周期变长</p><p>​                           修饰全局变量          使全局变量只能在自己所在的源文件内部使用</p><p>​                           修饰函数                  使函数只能在自己所在源文件内部使用，本质是将函数的外部链接属性变为内部链接属性</p><p>内存  ：  栈区  局部变量，函数参数</p><p>​               堆区   动态内存分配</p><p>​               静态区   全局变量，static 修饰的静态变量</p><p>全局变量，在其他源文件内部可以使用，因为全局变量具有外部链接属性，但static修饰后，就变成内部链接属性，其他源文件不能连接到这个静态变量</p><h1 id="函数与数组"><a href="#函数与数组" class="headerlink" title="函数与数组"></a>函数与数组</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>作用：简化代码，可以反复使用,区别与主函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">ADD</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span><br>&#123;<br>    <span class="hljs-type">int</span> z = x + y;<br>    <span class="hljs-keyword">return</span> z;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,ADD(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));<br>    <span class="hljs-keyword">return</span>  <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>定义： int arr[10]={0};     意义为定义了一个整形数组，最多十个元素</p><p>下标： 每个元素都有下标，下标从0开始</p><h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><h2 id="scanf语句"><a href="#scanf语句" class="headerlink" title="scanf语句"></a>scanf语句</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> b = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);<br></code></pre></td></tr></table></figure><hr><h2 id="选择语句"><a href="#选择语句" class="headerlink" title="选择语句"></a>选择语句</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> coding = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入(1/2):&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;coding);<br><span class="hljs-keyword">if</span>(coding == <span class="hljs-number">1</span>)<br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;有前途\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(coding ==<span class="hljs-number">2</span>)<br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;摆烂\n&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入错误\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p><strong>格式：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">switch</span>(整形表达式)<br>&#123;<br>    语句项：<br>&#125;<br><span class="hljs-comment">//语句项</span><br><span class="hljs-keyword">case</span> 整形常量表达式：<br>    语句;<br></code></pre></td></tr></table></figure><p><strong>switch</strong>后必须是整形，<strong>case</strong>必须包含常量值</p><p><strong>例子</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> day = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;day);<br>  <span class="hljs-keyword">switch</span> (day)<br>  &#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;星期1\n&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;星期2\n&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>: <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;星期3\n&quot;</span>);<br>    <span class="hljs-keyword">break</span>;      <br>  <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>: <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;星期4\n&quot;</span>);<br>    <span class="hljs-keyword">break</span>;      <br>  <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>: <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;星期5\n&quot;</span>);<br>    <span class="hljs-keyword">break</span>;      <br>  <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>: <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;星期6\n&quot;</span>);<br>    <span class="hljs-keyword">break</span>;      <br>  <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>: <br>     <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;星期7\n&quot;</span>); <br>     <span class="hljs-keyword">break</span>;     <br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>入口与出口</strong></p><p>实现真正的分支作用</p><p>输入几，就会从几进去（入口），然后一直把所有的case语句全部都执行完</p><p>所以需要添加<strong>break</strong>（出口）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> day = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;day);<br>    <span class="hljs-keyword">switch</span>(day)<br>    &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;工作日\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;休息日\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>; <br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入错误\n&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>default</strong>（其他情况的值） 无关顺序，只要满足逻辑<del>习惯上放在最后</del></p><p>case 常量值后的case 可以不带break ,只需要满足个人的编写逻辑就行。</p><p>__好习惯：__在最后一个case 后加一个break</p><hr><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>  结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">while</span>(表达式)<br>    循环语句;<br></code></pre></td></tr></table></figure><p> eg：打印 1 ~ 10 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(i &lt;= <span class="hljs-number">10</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,i);<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;()<br>&#125;<br></code></pre></td></tr></table></figure><p>在while循环中，<strong>break</strong>用于<strong>永久</strong>终止循环</p><p>在while循环中，<strong>continue</strong>作用是<strong>跳过本次循环continue后的代码</strong>，直接去while的判断部分，看是否进行下一次循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> ch = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>((ch = getchar()) != EOF)<br>    &#123;<br>        <span class="hljs-built_in">putchar</span>(ch);<br>        <span class="hljs-comment">//按下ctul + z 时读取读取结束</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>意义： </p><p><img src="https://s3.bmp.ovh/imgs/2022/09/03/7282bd8f7f4ef636.png"></p><p>回车键实际是输入\n，getchar<strong>不会忽略</strong>\n</p><p>所以读取时也会读取\n然后自动换行</p><p><strong>EOF</strong> - end of file - 文件结束标志    定义为（-1）</p><p>// ctrl+z - getchar 读取结束</p><p><strong>getchar()</strong> : 获取一个字符</p><p><strong>putchar()</strong> : 输出一个字符</p><p>putchar(ch); 与 printf(“ch”); 作用一样</p><p>getchar、scanf 等为输入函数，会读取回车（\n）</p><p>清理缓存区(如果有空格则写循环清楚所有的\n)</p><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>​             初始化     判断      调整</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span>(表达式<span class="hljs-number">1</span>；表达式<span class="hljs-number">2</span>；表达式)<br>    循环语句；<br></code></pre></td></tr></table></figure><h3 id="do-while-循环"><a href="#do-while-循环" class="headerlink" title="do while 循环"></a>do while 循环</h3><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><p>内存——储存器——程序运行在内存中进行</p><p>指针就是地址</p><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><p>让C语言创建新的类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> name[];<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">double</span> score;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Book</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> name[];<br>    <span class="hljs-type">float</span> price;<br>    <span class="hljs-type">char</span> id[];<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Stu</span> <span class="hljs-title">s</span> =</span> &#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">85.5</span>&#125;;<br>    <br>    <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>怎样在windows环境下远程连接到虚拟机的Ubunt</title>
    <link href="/2022/09/02/%E6%80%8E%E6%A0%B7%E5%9C%A8windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84Ubunt/"/>
    <url>/2022/09/02/%E6%80%8E%E6%A0%B7%E5%9C%A8windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%88%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84Ubunt/</url>
    
    <content type="html"><![CDATA[<h1 id="1-在虚拟机中安装Ubutun"><a href="#1-在虚拟机中安装Ubutun" class="headerlink" title="1.在虚拟机中安装Ubutun"></a>1.在虚拟机中安装Ubutun</h1><ul><li><p><strong>软件选择：VMware Workstation</strong></p><p><del>安装VM这就应该不用说什么了吧</del></p><p>发挥个人各种资源手段搞到一个Ubuntu镜像文件</p><p>安装Ubuntu</p></li></ul><hr><h1 id="2-SSH服务"><a href="#2-SSH服务" class="headerlink" title="2.SSH服务"></a>2.SSH服务</h1><p>​       SSH 为 Secure Shell 的缩写，由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层基础上的安全协议。SSH 是较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。SSH在正确使用时可弥补网络中的漏洞。SSH客户端适用于多种平台。</p><p>​      可以通过Windows自带的命令行连接，也可以使用vscode，还可以使用可视化第三方软件如某shell。</p><h1 id="3-通过-VScode-的-Remote-插件连接至虚拟机"><a href="#3-通过-VScode-的-Remote-插件连接至虚拟机" class="headerlink" title="3.通过 VScode 的 Remote 插件连接至虚拟机"></a>3.通过 <code>VScode</code> 的 <code>Remote</code> 插件连接至虚拟机</h1><ul><li><p><strong>VScode 上安装remote插件</strong></p><p><img src="https://s3.bmp.ovh/imgs/2022/09/02/50f858a93308a522.png"></p><p>此处选择安装Remote Development<del>SSH WSL等均一键安装</del></p></li><li><p> <strong>设置要连接的主机IP地址和用户名</strong></p></li></ul><p>​        <img src="https://s3.bmp.ovh/imgs/2022/09/02/0d9063ea4b31c27d.png"></p><ul><li><p><strong>报错<del>折磨时刻</del></strong></p><ol><li><strong>连接的时候报错 A ssh installation not found</strong></li></ol><p>​       在服务端和客户端安装ssh服务<del>好像win10自带ssh服务</del></p><ol start="2"><li><strong>提示permission denied</strong></li></ol><p>​       打开被连主机的配置文件：<strong>sudo vi /etc/ssh/sshd_config</strong><br>​       找到PermitRootLogin ，修改为yes<br>​       重启ssh服务</p><p>​       再次初步认识Ubuntu的终端命令使用</p><p>​       <del>什么文件权限不够、什么找不到文件在哪里真的把人搞麻了</del></p><ol start="3"><li><strong>写入管道不存在</strong></li></ol><p>​       是配置的时候写错了重新改了一下就好了</p></li></ul><h1 id="4-连接成功"><a href="#4-连接成功" class="headerlink" title="4.连接成功"></a>4.连接成功</h1><p>​        当VScode出现下图时，就已成功连接</p><p>​       <img src="https://s3.bmp.ovh/imgs/2022/09/02/28345d70bd7664eb.png"></p><p>​       <del>就可以随心所欲地乱搞</del></p><h1 id="5-免密登录"><a href="#5-免密登录" class="headerlink" title="5.免密登录"></a>5.免密登录</h1><ul><li><strong>在客户端生成密匙对</strong></li></ul><p>​       命令：ssh-keygen 可直接生成密匙对，可以连按空格键使密码为空</p><p>​       注意密匙对的格式为rsa,在C:\Users\username.ssh 路径下一定有密匙对</p><ul><li><strong>将客户端的公钥上传至服务端</strong></li></ul><p>​       这里又要涉及到权限的问题，一是用户的权限，一是文件的权限</p><p>​       sudo su 进入root模式</p><p>​       </p><ul><li> <strong>修改文件的权限</strong></li></ul><p>​        改.ssh目录的权限为700，文件authorized_keys和私钥的权限为600</p><p>​        chmod 700 目标机器路径/.ssh</p><p>​        chmod 600 目标机器路径/.ssh/authorized_keys</p><ul><li><strong>测试是否能够免密登录</strong></li></ul><h1 id="完成撒花"><a href="#完成撒花" class="headerlink" title="完成撒花"></a>完成撒花</h1>]]></content>
    
    
    
    <tags>
      
      <tag>“基础知识”</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>菜鸟搭建博客的过程</title>
    <link href="/2022/08/31/%E8%8F%9C%E9%B8%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B/"/>
    <url>/2022/08/31/%E8%8F%9C%E9%B8%9F%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1-搭建博客"><a href="#1-搭建博客" class="headerlink" title="1.搭建博客"></a>1.搭建博客</h2><p>首先摆一个个人博客链接：<a href="https://nanqin555.github.io/">博客 </a></p><p>参考资料：<a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程 - 知乎 (zhihu.com)</a></p><p>于是乎，一个菜鸟开始了个人博客的搭建。</p><ul><li><p><strong>安装各种程序</strong></p><p>这也是初次接触到Windows的命令行系统</p><ul><li><p>Git 的安装 <del>顺便安装了Github Desktop</del></p><p><img src="https://s3.bmp.ovh/imgs/2022/08/31/b8e5b8c5ef593066.png"></p><p><img src="https://s3.bmp.ovh/imgs/2022/08/31/b80d3e24d47d20a3.png"></p></li><li><p>Node.js 的安装</p><p>记得检测是否安装成功</p><p><img src="https://s3.bmp.ovh/imgs/2022/08/31/b7f94af4c923064e.jpg"></p></li><li><p>Hexo 的安装</p><p>Hexo就是我们的个人博客网站的框架， 在电脑常里创建一个文件夹，命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。</p><p><del>能够使用命令行直接下载Hexo的操作属实震惊了我这个小白</del></p><p>使用npm命令安装Hexo:npm install -g hexo-cli</p><p>初始化我们的博客:hexo init blog</p><p>检测网站雏形:hexo new test_my _site       hexo g      hexo s</p><p>然后就可以本地部署查看了！！<del>牛逼</del></p><p>浏览器访问：localhost:4000</p></li></ul></li><li><p><strong>创建GitHub个人仓库</strong></p><p><del>首先要有一个GitHub账号</del></p><p>值得注意的是，仓库名应该为：<strong>用户名</strong>.github.io  这个用户名使用你的GitHub帐号名称代替，这是固定写法.<del>曾在此反反复复无法托管page的问题上多次踩坑</del></p></li><li><p><strong>生成并新建GitHub的SSH keys</strong></p><p><img src="https://s3.bmp.ovh/imgs/2022/08/31/f647a5f7ca3f7898.png"></p><p><del>虽然还是搞不懂ssh的私钥与公钥🔑有什么用</del></p></li><li><p><strong>关联Hexo与GitHub并部署</strong></p><p>打开站点的配置文件_config.yml</p></li></ul><p>deploy:<br>type: git<br>repo: 这里填入之前在GitHub上创建仓库的完整路径,记得加上 .git</p><p><img src="https://s3.bmp.ovh/imgs/2022/08/31/35f2309a23f7476b.png"></p><p><strong>然后博客就可以访问拉！！！</strong><del><strong>完结撒花</strong></del></p><ul><li><p><strong>更改主题</strong></p><p><del>默认主题实在是太丑了</del></p><p>在这个<a href="https://hexo.io/themes/">主题 hexo</a>上面找了一个看的顺眼的主题<del>发现了一堆二次元主题</del></p><p>再用 __git clone 网址 themes/net__直接下载中意的主题</p><p>最后打开<strong>站点</strong>的_config.yml配置文件，修改主题为__主题名__</p><p>(还可以基于主题进行个性化配置<del>虽然我不会</del>)</p></li><li><p><strong>发布文章+图床的使用+再次部署</strong></p><p>发布文章：命令行输入：hexo n “名字”  </p><p>寻找图床：<del>我只能说谢谢兄弟的免费图床真好用</del></p><p>再次部署： hexo g、hexo d</p><h3 id="至此一个能够被称之为博客的东西出现了"><a href="#至此一个能够被称之为博客的东西出现了" class="headerlink" title="至此一个能够被称之为博客的东西出现了"></a>至此一个能够被称之为博客的东西出现了</h3><h3 id="大功告成了属于是"><a href="#大功告成了属于是" class="headerlink" title="大功告成了属于是"></a><del>大功告成了属于是</del></h3></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>“基础知识”</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
